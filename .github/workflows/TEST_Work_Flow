using CAT.App.D365.Service.Core.Utilities;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.ComponentModel.Design;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using static DotLiquid.Variable;

namespace CAT.App.D365.Service.Infra.Service
{
    public class CustomerService : ICustomerService
    {
        private readonly IAPICaller _apiCaller;
        private readonly IConfiguration _config;
        private readonly string _url;

        public CustomerService(IAPICaller apiCaller, IConfiguration config)
        {
            _apiCaller = apiCaller;
            _config = config;
            _url = _config[$"AppSettings:FinOpsApiBaseUrl"] ?? _config["FinOpsApiBaseUrl"];
        }

        public async Task<string> CreateCustomerAsync(string customerInfo)
        {
            try
            {
                string odataQuery = $"data/Customers";
                StringContent contents = new StringContent(customerInfo, Encoding.UTF8, "application/json");
                var response = await _apiCaller.FinOpsApiCallAsync(HttpMethod.Post, odataQuery, contents);
                return await response.Content.ReadAsStringAsync();
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message, ex);
            }
        }

        public async Task<string> GetCustomerAsync(string companyId, string customerAccount)
        {
            string odataQuery = $"data/Customers?cross-company=true&$filter=dataAreaId eq '{companyId}' and CustomerAccount eq '{customerAccount}'";
            try
            {   
                var response = await _apiCaller.FinOpsApiCallAsync(HttpMethod.Get, odataQuery);

                return response.Content.ReadAsStringAsync().Result;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message, ex);
            }
        }

        public async Task<string> UpdateCustomerAsync(String customerInfo, string companyId, string customerAccount)
        {
            string odataQuery = $"data/Customers(dataAreaId='{companyId}',CustomerAccount='{customerAccount}')?cross-company=true&$select=PartyNumber";
            try
            {
                StringContent contents = new StringContent(customerInfo, Encoding.UTF8, "application/json");
                var response = await _apiCaller.FinOpsApiCallAsync(HttpMethod.Patch, odataQuery, contents);

                if (response.IsSuccessStatusCode)
                    return response.Content.ReadAsStringAsync().Result;
                else
                    throw new Exception(response.Content.ReadAsStringAsync().Result);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message, ex);
            }
        }

        public async Task<string> CreatePartyContactsAsync(string companyId, string partyNumber, string partyContactInformation)
        {
            string odataQuery = $"data/PartyContactsV3?cross-company=true&$filter=dataAreaId eq '{companyId}'";
            try
            {
                StringContent contents = new StringContent(partyContactInformation, Encoding.UTF8, "application/json");
                var response = await _apiCaller.FinOpsApiCallAsync(HttpMethod.Post, odataQuery, contents);

                if (response.IsSuccessStatusCode)
                    return response.Content.ReadAsStringAsync().Result;
                else
                    throw new Exception(response.Content.ReadAsStringAsync().Result);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message, ex);
            }
        }

        public async Task<string> GetPartyContactsAsync(string partyNumber)
        {
            string odataQuery = $"data/PartyContactsV3?cross-company=true&$filter=PartyNumber eq '{partyNumber}'";
            try
            {
                var response = await _apiCaller.FinOpsApiCallAsync(HttpMethod.Get, odataQuery);

                return response.Content.ReadAsStringAsync().Result;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message, ex);
            }
        }

        public async Task<string> UpdatePartyContactsAsync(string partyNumber, string partyElectronicAddressId, string partyContacId, string partyContactInformation)
        {
            string odataQuery = $"data/PartyContactsV3(ElectronicAddressId='{partyElectronicAddressId}',PartyNumber='{partyNumber}')?cross-company=true";

            try
            {
                StringContent contents = new StringContent(partyContactInformation, Encoding.UTF8, "application/json");
                var response = await _apiCaller.FinOpsApiCallAsync(HttpMethod.Patch, odataQuery, contents);

                if (response.IsSuccessStatusCode)
                    return response.Content.ReadAsStringAsync().Result;
                else
                    throw new Exception(response.Content.ReadAsStringAsync().Result);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message, ex);
            }
        }
    }
}

