using CAT.App.D365.Service.Core.Utilities;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CAT.App.D365.Service.Infra.Service
{
    public class CompanyService : ICompanyService
    {
        private readonly IAPICaller _apiCaller;
        private readonly IConfiguration _config;
        private readonly string _url;

        public CompanyService(IAPICaller apiCaller, IConfiguration config)
        {
            _apiCaller = apiCaller;
            _config = config;
            _url = _config[$"AppSettings:FinOpsApiBaseUrl"] ?? _config["FinOpsApiBaseUrl"];
        }

        //TODO: to be remove?
        public async Task<string> CreateCompanyAsync(string companyInfo)
        {
            try
            {
                string odataQuery = $"data/LegalEntities";
                StringContent contents = new StringContent(JsonConvert.SerializeObject(companyInfo), Encoding.UTF8, "application/json");
                var response = await _apiCaller.FinOpsApiCallAsync(HttpMethod.Post, odataQuery, contents);
                return await response.Content.ReadAsStringAsync();
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
        }

        public async Task<string> GetCurrentPeriodAsync(string dataAreaId)
        {
            string odataQuery = $"data/LedgerCalendars";
            try
            {
                var response = await _apiCaller.FinOpsApiCallAsync(HttpMethod.Get, odataQuery);

                return response.Content.ReadAsStringAsync().Result;
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
        }

        public async Task<string> GetCompanyAsync(string legalEntityId)
        {
            string odataQuery = $"data/LegalEntities?$filter=LegalEntityId eq '{legalEntityId}'";
            try
            {
                var response = await _apiCaller.FinOpsApiCallAsync(HttpMethod.Get, odataQuery);

                return response.Content.ReadAsStringAsync().Result;
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
        }

        public async Task<string> GetLedgerFiscalPeriodsAsync(string legalEntityId, string calendarName = "Fiscal")
        {
            int currentYear = DateTime.Now.Year;
            string odataQuery = $"data/LedgerFiscalPeriods?$filter=LegalEntityId eq '{legalEntityId}' and Calendar eq '{calendarName}' and YearName eq '{currentYear}' and PeriodStatus eq Microsoft.Dynamics.DataEntities.FiscalPeriodStatus'Open'";

            try
            {
                var response = await _apiCaller.FinOpsApiCallAsync(HttpMethod.Get, odataQuery);

                return response.Content.ReadAsStringAsync().Result;
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
        }

        public async Task<string> GetFiscalPeriodsAsync(string periodName, string calendarName, int currentYear)
        {
            string odataQuery = $"data/FiscalPeriods?$filter=FiscalYear eq '{currentYear}' and PeriodName eq '{periodName}' and Calendar eq '{calendarName}' and Type eq Microsoft.Dynamics.DataEntities.FiscalPeriodType'Operating'&$orderby=EndDate desc";

            try
            {
                var response = await _apiCaller.FinOpsApiCallAsync(HttpMethod.Get, odataQuery);

                return response.Content.ReadAsStringAsync().Result;
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
        }

        public async Task<string> GetFiscalYearsAsync(string legalEntityId)
        {
            int currentYear = DateTime.Now.Year;
            string odataQuery = $"data/FiscalYears?$filter=LegalEntityId eq '{legalEntityId}' and Status eq Microsoft.Dynamics.DataEntities.FiscalYearStatus'Open'";
            try
            {
                var response = await _apiCaller.FinOpsApiCallAsync(HttpMethod.Get, odataQuery);

                return response.Content.ReadAsStringAsync().Result;
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
        }

        //TODO: to be remove?
        public async Task<string> GetFiscalCalendarPeriods(string calendarId)
        {
            string odataQuery = $"data/FiscalCalendarPeriods";
                //$"// ?$filter=CalendarRecId eq '{calendarId}'";
            try
            {
                var response = await _apiCaller.FinOpsApiCallAsync(HttpMethod.Get, odataQuery);

                return response.Content.ReadAsStringAsync().Result;
            }
            catch (Exception ex)
            {
                return ex.Message;
            }

        }
    }
}
